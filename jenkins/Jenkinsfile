pipeline{
    agent any
    environment{
        registry="namrata99/vote" 
        dockerImage=""  
        dockertoken=credentials("docker-token")
    }
    stages{
        stage('Building our image') { 
            steps { 
                script { 
                    sh 'docker build -t \${registry}:${BUILD_NUMBER}  .'
                }
            } 
        }
        stage('Deploy our image') { 
            steps { 
                script { 
                     withCredentials([string(credentialsId: 'DOCKER_SECRET', variable: 'dockerhubpwd')]) {
                   sh 'docker login -u namrata99 -p ${dockerhubpwd}'
                     }
                   sh 'docker push \${registry}:${BUILD_NUMBER}'
                   sh 'docker push \${registry}:latest'
                } 
            }
        }
        stage('Package helm chart and push') {
            steps{

                script{
                    sh """
                    cp ./chart/vote/Chart.yaml chart.yaml.tmp && sed "/^\\([[:space:]]*version: \\).*/s//\\10.\${BUILD_NUMBER}.0/" < chart.yaml.tmp >./chart/vote/Chart.yaml && rm -f chart.yaml.tmp
                    cp ./chart/vote/values.yaml values.yaml.tmp && sed 's/namrata99\\/vote/namrata99\\/vote:${BUILD_NUMBER}/g' < values.yaml.tmp >./chart/vote/values.yaml && rm -f values.yaml.tmp
                    echo \${dockertoken} | helm registry login registry-1.docker.io -u namrata99 --password-stdin
                    helm package ./chart/vote/
                    helm push helm_vote-0.\${BUILD_NUMBER}.0.tgz oci://registry-1.docker.io/namrata99
                    """
                }

                build job: "voting-app-chart", wait: true,parameters: [
                string(name: 'voteChartVersion', value: "0.${BUILD_NUMBER}.0")
                ]
            }
        }
    }
}